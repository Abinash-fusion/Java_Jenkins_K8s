pipeline {
    agent any
    tools {
        nodejs 'NodeJS'
    }
    environment {
        DOCKER_HUB_REPO = 'abinashpati/java_jenkins_k8s'
		DOCKER_HUB_CREDENTIAL_ID='gitops-dockerhub'
    }
    stages {
        stage('Checkout GitHub') {
            steps {
                git branch: 'main', credentialsId: 'GitOps-token', url: 'https://github.com/Abinash-fusion/Java_Jenkins_K8s.git'
            }
        }
        stage('installing node dependencies') {
            steps {
                sh 'echo "npm install..."'
            }
        }
        stage('Build with Maven') {
            steps {
                sh 'mvn clean package' // This will create the target directory and the JAR
            }
        }
        stage('Docker Image Building') {
            steps {
                script {
                    echo 'building docker Image...'
                    dockerImage=docker.build("${DOCKER_HUB_REPO}:latest")
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                echo 'scanning docker Image with Trivy...'
                //sh 'trivy image --no-progress --format json -o trivy-scan-report.txt ${DOCKER_HUB_REPO}:latest'
				sh 'trivy image --no-progress --skip-update --format json -o trivy-scan-report.txt ${DOCKER_HUB_REPO}:latest'
            }
        }
        stage('Push Image to DockerHub') {
            steps {
                script {
                    echo 'pushing docker Image to DockerHub...'
					docker.withRegistry("http://registry.hub.docker.com","${DOCKER_HUB_CREDENTIAL_ID}"){
					dockerImage.push('latest')
					}
                }
            }
        }
       stage('Install Kubectl & ArgoCD CLI'){
    steps {
        script { // Use a script block to execute Groovy code
            echo 'installing Kubectl & ArgoCD cli...'

            // Get nodePort and nodeIp using separate sh commands
            def nodePort = sh(script: 'kubectl get svc argocd-server -n argocd -o=jsonpath="{.spec.ports[?(@.name==\\"https\\")].nodePort}"', returnStdout: true).trim()
            def nodeIp = sh(script: 'minikube ip', returnStdout: true).trim()

            // Get ArgoCD admin password
            def argocdAdminPassword = sh(script: 'kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d', returnStdout: true).trim()

            // Pass the variables to the shell script using triple double quotes for multi-line execution
            sh """
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                mv kubectl /usr/local/bin/kubectl
                curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                chmod +x /usr/local/bin/argocd
                argocd login ${nodeIp}:${nodePort} --username admin --password ${ARGOCD_PASSWORD} --insecure
            """
        }
    }
} 
            
			}
